import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import Navbar from "@/components/layout/Navbar";
import Alert from "@/components/feedback/Alert";
import { cookies } from "next/headers";
import { redirect } from "next/navigation";
import ProgressBar from "@/components/layout/ProgressBar";
export const revalidate = 0;

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "OpenCourse",
  description: "Generated by create next app",
};

async function getLoggedIn() {
  const res = await fetch(
    process.env.NEXT_PUBLIC_API_URL_BASE + "/check_logged_in",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Cookie: cookies().toString(),
      },
      credentials: "include",
    },
  );
  const returnObject = {
    ok: false,
    level: 0,
    name: "",
    avatar: "",
  };
  returnObject.ok = res.ok;
  const data = await res.json();
  if (res.ok) {
    returnObject.level = data.level;
    returnObject.name = data.name;
    returnObject.avatar = data.avatar;
  }
  return returnObject;
}

async function getSiteLogo() {
  const res = await fetch(
    process.env.NEXT_PUBLIC_API_URL_BASE + "/navbar_info",
    {
      method: "GET",
      cache: "no-store",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Cookie: cookies().toString(),
      },
      credentials: "include",
    },
  );
  const returnObject = {
    ok: false,
    site_logo: "",
    site_name: "",
    text_over_logo: false,
    rAvatar: Math.floor(Math.random() * 4) + 1,
  };
  returnObject.ok = res.ok;
  const data = await res.json();
  if (res.ok) {
    returnObject.site_logo = data.site_logo;
    returnObject.site_name = data.site_name;
    returnObject.text_over_logo = data.text_over_logo;
  }
  return returnObject;
}
export default async function RootLayout({
  children,
}: {
  children: React.ReactNode | any;
}) {
  const responseData = getLoggedIn();
  const siteLogoData = getSiteLogo();

  const [response, siteLogo] = await Promise.all([responseData, siteLogoData]);

  if (!response.ok && !children!.props.childProp.segment.includes("auth")) {
    redirect("/auth/login");
  } else if (
    children!.props.childProp.segment.includes("admin") &&
    response.level < 2
  ) {
    redirect("/");
  }
  return (
    <html lang="en" className={"h-full"}>
      <body className={"h-full bg-primary"}>
        <ProgressBar />

        <Navbar response={response} siteLogo={siteLogo}>
          <Alert />
          {children}
        </Navbar>
      </body>
    </html>
  );
}
